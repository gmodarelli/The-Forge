// auto generated by c2z
#include <new>
#include "IGraphics.h"

// TIDES: BEGIN MANUAL CHANGES
extern "C" void _1_initGPUConfiguration_(ExtendedSettings* pExtendedSettings) { ::initGPUConfiguration(pExtendedSettings); }
// TIDES: END MANUAL CHANGES

extern "C" void _1_initRendererContext_(const char* appName, const RendererContextDesc* pSettings, RendererContext** ppContext)
{
    ::initRendererContext(appName, pSettings, ppContext);
}
extern "C" void _1_exitRendererContext_(RendererContext* pContext) { ::exitRendererContext(pContext); }
extern "C" void _1_initRenderer_(const char* appName, const RendererDesc* pSettings, Renderer** ppRenderer)
{
    ::initRenderer(appName, pSettings, ppRenderer);
}
extern "C" void _1_exitRenderer_(Renderer* pRenderer) { ::exitRenderer(pRenderer); }
extern "C" void _1_initFence_(Renderer* pRenderer, Fence** ppFence) { ::initFence(pRenderer, ppFence); }
extern "C" void _1_exitFence_(Renderer* pRenderer, Fence* pFence) { ::exitFence(pRenderer, pFence); }
extern "C" void _1_initSemaphore_(Renderer* pRenderer, Semaphore** ppSemaphore) { ::initSemaphore(pRenderer, ppSemaphore); }
extern "C" void _1_exitSemaphore_(Renderer* pRenderer, Semaphore* pSemaphore) { ::exitSemaphore(pRenderer, pSemaphore); }
extern "C" void _1_initQueue_(Renderer* pRenderer, QueueDesc* pQDesc, Queue** ppQueue) { ::initQueue(pRenderer, pQDesc, ppQueue); }
extern "C" void _1_exitQueue_(Renderer* pRenderer, Queue* pQueue) { ::exitQueue(pRenderer, pQueue); }
extern "C" void _1_addSwapChain_(Renderer* pRenderer, const SwapChainDesc* pDesc, SwapChain** ppSwapChain)
{
    ::addSwapChain(pRenderer, pDesc, ppSwapChain);
}
extern "C" void _1_removeSwapChain_(Renderer* pRenderer, SwapChain* pSwapChain) { ::removeSwapChain(pRenderer, pSwapChain); }
extern "C" void _1_addResourceHeap_(Renderer* pRenderer, const ResourceHeapDesc* pDesc, ResourceHeap** ppHeap)
{
    ::addResourceHeap(pRenderer, pDesc, ppHeap);
}
extern "C" void _1_removeResourceHeap_(Renderer* pRenderer, ResourceHeap* pHeap) { ::removeResourceHeap(pRenderer, pHeap); }
extern "C" void _1_initCmdPool_(Renderer* pRenderer, const CmdPoolDesc* pDesc, CmdPool** ppCmdPool)
{
    ::initCmdPool(pRenderer, pDesc, ppCmdPool);
}
extern "C" void _1_exitCmdPool_(Renderer* pRenderer, CmdPool* pCmdPool) { ::exitCmdPool(pRenderer, pCmdPool); }
extern "C" void _1_initCmd_(Renderer* pRenderer, const CmdDesc* pDesc, Cmd** ppCmd) { ::initCmd(pRenderer, pDesc, ppCmd); }
extern "C" void _1_exitCmd_(Renderer* pRenderer, Cmd* pCmd) { ::exitCmd(pRenderer, pCmd); }
extern "C" void _1_initCmd_n_(Renderer* pRenderer, const CmdDesc* pDesc, uint32_t cmdCount, Cmd*** pppCmds)
{
    ::initCmd_n(pRenderer, pDesc, cmdCount, pppCmds);
}
extern "C" void _1_exitCmd_n_(Renderer* pRenderer, uint32_t cmdCount, Cmd** ppCmds) { ::exitCmd_n(pRenderer, cmdCount, ppCmds); }
extern "C" void _1_addRenderTarget_(Renderer* pRenderer, const RenderTargetDesc* pDesc, RenderTarget** ppRenderTarget)
{
    ::addRenderTarget(pRenderer, pDesc, ppRenderTarget);
}
extern "C" void _1_removeRenderTarget_(Renderer* pRenderer, RenderTarget* pRenderTarget) { ::removeRenderTarget(pRenderer, pRenderTarget); }
extern "C" void _1_addSampler_(Renderer* pRenderer, const SamplerDesc* pDesc, Sampler** ppSampler)
{
    ::addSampler(pRenderer, pDesc, ppSampler);
}
extern "C" void _1_removeSampler_(Renderer* pRenderer, Sampler* pSampler) { ::removeSampler(pRenderer, pSampler); }
extern "C" void _1_addShaderBinary_(Renderer* pRenderer, const BinaryShaderDesc* pDesc, Shader** ppShaderProgram)
{
    ::addShaderBinary(pRenderer, pDesc, ppShaderProgram);
}
extern "C" void _1_removeShader_(Renderer* pRenderer, Shader* pShaderProgram) { ::removeShader(pRenderer, pShaderProgram); }
extern "C" void _1_addRootSignature_(Renderer* pRenderer, const RootSignatureDesc* pDesc, RootSignature** ppRootSignature)
{
    ::addRootSignature(pRenderer, pDesc, ppRootSignature);
}
extern "C" void _1_removeRootSignature_(Renderer* pRenderer, RootSignature* pRootSignature)
{
    ::removeRootSignature(pRenderer, pRootSignature);
}
extern "C" uint32_t _1_getDescriptorIndexFromName_(const RootSignature* pRootSignature, const char* pName)
{
    return ::getDescriptorIndexFromName(pRootSignature, pName);
}
extern "C" void _1_addPipeline_(Renderer* pRenderer, const PipelineDesc* pPipelineSettings, Pipeline** ppPipeline)
{
    ::addPipeline(pRenderer, pPipelineSettings, ppPipeline);
}
extern "C" void _1_removePipeline_(Renderer* pRenderer, Pipeline* pPipeline) { ::removePipeline(pRenderer, pPipeline); }
extern "C" void _1_addPipelineCache_(Renderer* pRenderer, const PipelineCacheDesc* pDesc, PipelineCache** ppPipelineCache)
{
    ::addPipelineCache(pRenderer, pDesc, ppPipelineCache);
}
extern "C" void _1_getPipelineCacheData_(Renderer* pRenderer, PipelineCache* pPipelineCache, size_t* pSize, void* pData)
{
    ::getPipelineCacheData(pRenderer, pPipelineCache, pSize, pData);
}
extern "C" void _1_removePipelineCache_(Renderer* pRenderer, PipelineCache* pPipelineCache)
{
    ::removePipelineCache(pRenderer, pPipelineCache);
}
extern "C" void _1_addDescriptorSet_(Renderer* pRenderer, const DescriptorSetDesc* pDesc, DescriptorSet** ppDescriptorSet)
{
    ::addDescriptorSet(pRenderer, pDesc, ppDescriptorSet);
}
extern "C" void _1_removeDescriptorSet_(Renderer* pRenderer, DescriptorSet* pDescriptorSet)
{
    ::removeDescriptorSet(pRenderer, pDescriptorSet);
}
extern "C" void _1_updateDescriptorSet_(Renderer* pRenderer, uint32_t index, DescriptorSet* pDescriptorSet, uint32_t count,
                                        const DescriptorData* pParams)
{
    ::updateDescriptorSet(pRenderer, index, pDescriptorSet, count, pParams);
}
extern "C" void _1_resetCmdPool_(Renderer* pRenderer, CmdPool* pCmdPool) { ::resetCmdPool(pRenderer, pCmdPool); }
extern "C" void _1_beginCmd_(Cmd* pCmd) { ::beginCmd(pCmd); }
extern "C" void _1_endCmd_(Cmd* pCmd) { ::endCmd(pCmd); }
extern "C" void _1_cmdBindRenderTargets_(Cmd* pCmd, const BindRenderTargetsDesc* pDesc) { ::cmdBindRenderTargets(pCmd, pDesc); }
extern "C" void _1_cmdSetViewport_(Cmd* pCmd, float x, float y, float width, float height, float minDepth, float maxDepth)
{
    ::cmdSetViewport(pCmd, x, y, width, height, minDepth, maxDepth);
}
extern "C" void _1_cmdSetScissor_(Cmd* pCmd, uint32_t x, uint32_t y, uint32_t width, uint32_t height)
{
    ::cmdSetScissor(pCmd, x, y, width, height);
}
extern "C" void _1_cmdSetStencilReferenceValue_(Cmd* pCmd, uint32_t val) { ::cmdSetStencilReferenceValue(pCmd, val); }
extern "C" void _1_cmdBindPipeline_(Cmd* pCmd, Pipeline* pPipeline) { ::cmdBindPipeline(pCmd, pPipeline); }
extern "C" void _1_cmdBindDescriptorSet_(Cmd* pCmd, uint32_t index, DescriptorSet* pDescriptorSet)
{
    ::cmdBindDescriptorSet(pCmd, index, pDescriptorSet);
}
extern "C" void _1_cmdBindPushConstants_(Cmd* pCmd, RootSignature* pRootSignature, uint32_t paramIndex, const void* pConstants)
{
    ::cmdBindPushConstants(pCmd, pRootSignature, paramIndex, pConstants);
}
extern "C" void _1_cmdBindDescriptorSetWithRootCbvs_(Cmd* pCmd, uint32_t index, DescriptorSet* pDescriptorSet, uint32_t count,
                                                     const DescriptorData* pParams)
{
    ::cmdBindDescriptorSetWithRootCbvs(pCmd, index, pDescriptorSet, count, pParams);
}
extern "C" void _1_cmdBindIndexBuffer_(Cmd* pCmd, Buffer* pBuffer, uint32_t indexType, uint64_t offset)
{
    ::cmdBindIndexBuffer(pCmd, pBuffer, indexType, offset);
}
extern "C" void _1_cmdBindVertexBuffer_(Cmd* pCmd, uint32_t bufferCount, Buffer** ppBuffers, const uint32_t* pStrides,
                                        const uint64_t* pOffsets)
{
    ::cmdBindVertexBuffer(pCmd, bufferCount, ppBuffers, pStrides, pOffsets);
}
extern "C" void _1_cmdDraw_(Cmd* pCmd, uint32_t vertexCount, uint32_t firstVertex) { ::cmdDraw(pCmd, vertexCount, firstVertex); }
extern "C" void _1_cmdDrawInstanced_(Cmd* pCmd, uint32_t vertexCount, uint32_t firstVertex, uint32_t instanceCount, uint32_t firstInstance)
{
    ::cmdDrawInstanced(pCmd, vertexCount, firstVertex, instanceCount, firstInstance);
}
extern "C" void _1_cmdDrawIndexed_(Cmd* pCmd, uint32_t indexCount, uint32_t firstIndex, uint32_t firstVertex)
{
    ::cmdDrawIndexed(pCmd, indexCount, firstIndex, firstVertex);
}
extern "C" void _1_cmdDrawIndexedInstanced_(Cmd* pCmd, uint32_t indexCount, uint32_t firstIndex, uint32_t instanceCount,
                                            uint32_t firstVertex, uint32_t firstInstance)
{
    ::cmdDrawIndexedInstanced(pCmd, indexCount, firstIndex, instanceCount, firstVertex, firstInstance);
}
extern "C" void _1_cmdDispatch_(Cmd* pCmd, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
    ::cmdDispatch(pCmd, groupCountX, groupCountY, groupCountZ);
}
extern "C" void _1_cmdResourceBarrier_(Cmd* pCmd, uint32_t bufferBarrierCount, BufferBarrier* pBufferBarriers, uint32_t textureBarrierCount,
                                       TextureBarrier* pTextureBarriers, uint32_t rtBarrierCount, RenderTargetBarrier* pRtBarriers)
{
    ::cmdResourceBarrier(pCmd, bufferBarrierCount, pBufferBarriers, textureBarrierCount, pTextureBarriers, rtBarrierCount, pRtBarriers);
}
extern "C" void _1_acquireNextImage_(Renderer* pRenderer, SwapChain* pSwapChain, Semaphore* pSignalSemaphore, Fence* pFence,
                                     uint32_t* pImageIndex)
{
    ::acquireNextImage(pRenderer, pSwapChain, pSignalSemaphore, pFence, pImageIndex);
}
extern "C" void _1_queueSubmit_(Queue* pQueue, const QueueSubmitDesc* pDesc) { ::queueSubmit(pQueue, pDesc); }
extern "C" void _1_queuePresent_(Queue* pQueue, const QueuePresentDesc* pDesc) { ::queuePresent(pQueue, pDesc); }
extern "C" void _1_waitQueueIdle_(Queue* pQueue) { ::waitQueueIdle(pQueue); }
extern "C" void _1_getFenceStatus_(Renderer* pRenderer, Fence* pFence, FenceStatus* pFenceStatus)
{
    ::getFenceStatus(pRenderer, pFence, pFenceStatus);
}
extern "C" void _1_waitForFences_(Renderer* pRenderer, uint32_t fenceCount, Fence** ppFences)
{
    ::waitForFences(pRenderer, fenceCount, ppFences);
}
extern "C" void            _1_toggleVSync_(Renderer* pRenderer, SwapChain** ppSwapchain) { ::toggleVSync(pRenderer, ppSwapchain); }
extern "C" TinyImageFormat _1_getSupportedSwapchainFormat_(Renderer* pRenderer, const SwapChainDesc* pDesc, ColorSpace colorSpace)
{
    return ::getSupportedSwapchainFormat(pRenderer, pDesc, colorSpace);
}
extern "C" uint32_t _1_getRecommendedSwapchainImageCount_(Renderer* pRenderer, const WindowHandle* hwnd)
{
    return ::getRecommendedSwapchainImageCount(pRenderer, hwnd);
}
extern "C" void _1_cmdExecuteIndirect_(Cmd* pCmd, IndirectArgumentType type, unsigned int maxCommandCount, Buffer* pIndirectBuffer,
                                       uint64_t bufferOffset, Buffer* pCounterBuffer, uint64_t counterBufferOffset)
{
    ::cmdExecuteIndirect(pCmd, type, maxCommandCount, pIndirectBuffer, bufferOffset, pCounterBuffer, counterBufferOffset);
}
extern "C" void _1_addWorkgraph_(Renderer* pRenderer, const WorkgraphDesc* pDesc, Workgraph** ppWorkgraph)
{
    ::addWorkgraph(pRenderer, pDesc, ppWorkgraph);
}
extern "C" void _1_removeWorkgraph_(Renderer* pRenderer, Workgraph* pWorkgraph) { ::removeWorkgraph(pRenderer, pWorkgraph); }
extern "C" void _1_cmdDispatchWorkgraph_(Cmd* pCmd, const DispatchGraphDesc* pDesc) { ::cmdDispatchWorkgraph(pCmd, pDesc); }
extern "C" void _1_getTimestampFrequency_(Queue* pQueue, double* pFrequency) { ::getTimestampFrequency(pQueue, pFrequency); }
extern "C" void _1_initQueryPool_(Renderer* pRenderer, const QueryPoolDesc* pDesc, QueryPool** ppQueryPool)
{
    ::initQueryPool(pRenderer, pDesc, ppQueryPool);
}
extern "C" void _1_exitQueryPool_(Renderer* pRenderer, QueryPool* pQueryPool) { ::exitQueryPool(pRenderer, pQueryPool); }
extern "C" void _1_cmdBeginQuery_(Cmd* pCmd, QueryPool* pQueryPool, QueryDesc* pQuery) { ::cmdBeginQuery(pCmd, pQueryPool, pQuery); }
extern "C" void _1_cmdEndQuery_(Cmd* pCmd, QueryPool* pQueryPool, QueryDesc* pQuery) { ::cmdEndQuery(pCmd, pQueryPool, pQuery); }
extern "C" void _1_cmdResolveQuery_(Cmd* pCmd, QueryPool* pQueryPool, uint32_t startQuery, uint32_t queryCount)
{
    ::cmdResolveQuery(pCmd, pQueryPool, startQuery, queryCount);
}
extern "C" void _1_cmdResetQuery_(Cmd* pCmd, QueryPool* pQueryPool, uint32_t startQuery, uint32_t queryCount)
{
    ::cmdResetQuery(pCmd, pQueryPool, startQuery, queryCount);
}
extern "C" void _1_getQueryData_(Renderer* pRenderer, QueryPool* pQueryPool, uint32_t queryIndex, QueryData* pOutData)
{
    ::getQueryData(pRenderer, pQueryPool, queryIndex, pOutData);
}
extern "C" void _1_logMemoryStats_(Renderer* pRenderer) { ::logMemoryStats(pRenderer); }
extern "C" void _1_calculateMemoryUse_(Renderer* pRenderer, uint64_t* usedBytes, uint64_t* totalAllocatedBytes)
{
    ::calculateMemoryUse(pRenderer, usedBytes, totalAllocatedBytes);
}
extern "C" void _1_cmdBeginDebugMarker_(Cmd* pCmd, float r, float g, float b, const char* pName)
{
    ::cmdBeginDebugMarker(pCmd, r, g, b, pName);
}
extern "C" void _1_cmdEndDebugMarker_(Cmd* pCmd) { ::cmdEndDebugMarker(pCmd); }
extern "C" void _1_cmdAddDebugMarker_(Cmd* pCmd, float r, float g, float b, const char* pName)
{
    ::cmdAddDebugMarker(pCmd, r, g, b, pName);
}
extern "C" void _1_cmdWriteMarker_(Cmd* pCmd, const MarkerDesc* pDesc) { ::cmdWriteMarker(pCmd, pDesc); }
extern "C" void _1_setBufferName_(Renderer* pRenderer, Buffer* pBuffer, const char* pName) { ::setBufferName(pRenderer, pBuffer, pName); }
extern "C" void _1_setTextureName_(Renderer* pRenderer, Texture* pTexture, const char* pName)
{
    ::setTextureName(pRenderer, pTexture, pName);
}
extern "C" void _1_setRenderTargetName_(Renderer* pRenderer, RenderTarget* pRenderTarget, const char* pName)
{
    ::setRenderTargetName(pRenderer, pRenderTarget, pName);
}
extern "C" void _1_setPipelineName_(Renderer* pRenderer, Pipeline* pPipeline, const char* pName)
{
    ::setPipelineName(pRenderer, pPipeline, pName);
}
