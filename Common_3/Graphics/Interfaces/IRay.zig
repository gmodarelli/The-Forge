// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

pub const Renderer = Renderer;

pub const Raytracing = Raytracing;

pub const Buffer = Buffer;

pub const Texture = Texture;

pub const Cmd = Cmd;

pub const AccelerationStructure = AccelerationStructure;

pub const DescriptorData = DescriptorData;

pub const ID3D12Device5 = ID3D12Device5;

pub const AccelerationStructureType = extern struct {
    bits: c_int = 0,

    pub const ACCELERATION_STRUCTURE_TYPE_BOTTOM: AccelerationStructureType = .{ .bits = @as(c_uint, @intCast(0)) };
    pub const ACCELERATION_STRUCTURE_TYPE_TOP: AccelerationStructureType = .{ .bits = AccelerationStructureType.ACCELERATION_STRUCTURE_TYPE_BOTTOM.bits + 1 };

    // pub usingnamespace cpp.FlagsMixin(AccelerationStructureType);
};

/// Supported by DXR. Metal ignores this.
pub const AccelerationStructureBuildFlags = extern struct {
    bits: c_int = 0,

    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_NONE: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(0)) };
    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(1)) };
    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(2)) };
    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(4)) };
    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(8)) };
    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(16)) };
    pub const ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE: AccelerationStructureBuildFlags = .{ .bits = @as(c_uint, @intCast(32)) };

    // pub usingnamespace cpp.FlagsMixin(AccelerationStructureBuildFlags);
};

/// Supported by DXR. Metal ignores this.
/// Rustam: check if this can be mapped to Metal
pub const AccelerationStructureGeometryFlags = extern struct {
    bits: c_int = 0,

    pub const ACCELERATION_STRUCTURE_GEOMETRY_FLAG_NONE: AccelerationStructureGeometryFlags = .{ .bits = @as(c_uint, @intCast(0)) };
    pub const ACCELERATION_STRUCTURE_GEOMETRY_FLAG_OPAQUE: AccelerationStructureGeometryFlags = .{ .bits = @as(c_uint, @intCast(1)) };
    pub const ACCELERATION_STRUCTURE_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION: AccelerationStructureGeometryFlags = .{ .bits = @as(c_uint, @intCast(2)) };

    // pub usingnamespace cpp.FlagsMixin(AccelerationStructureGeometryFlags);
};

/// Rustam: check if this can be mapped to Metal
/// Rustam: check if this can be mapped to Metal
pub const AccelerationStructureInstanceFlags = extern struct {
    bits: c_int = 0,

    pub const ACCELERATION_STRUCTURE_INSTANCE_FLAG_NONE: AccelerationStructureInstanceFlags = .{ .bits = @as(c_uint, @intCast(0)) };
    pub const ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE: AccelerationStructureInstanceFlags = .{ .bits = @as(c_uint, @intCast(1)) };
    pub const ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE: AccelerationStructureInstanceFlags = .{ .bits = @as(c_uint, @intCast(2)) };
    pub const ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE: AccelerationStructureInstanceFlags = .{ .bits = @as(c_uint, @intCast(4)) };
    pub const ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NON_OPAQUE: AccelerationStructureInstanceFlags = .{ .bits = @as(c_uint, @intCast(8)) };

    // pub usingnamespace cpp.FlagsMixin(AccelerationStructureInstanceFlags);
};

/// Rustam: check if this can be mapped to Metal
pub const AccelerationStructureInstanceDesc = extern struct {
    pBottomAS: [*c]AccelerationStructure,
/// Row major affine transform for transforming the vertices in the geometry stored in pAccelerationStructure
    mTransform: [12]f32,
/// User defined instanced ID which can be queried in the shader
    mInstanceID: u32,
    mInstanceMask: u32,
    mInstanceContributionToHitGroupIndex: u32,
    mFlags: AccelerationStructureInstanceFlags,
};

pub const AccelerationStructureGeometryDesc = extern struct {
    pVertexBuffer: [*c]Buffer,
    pIndexBuffer: [*c]Buffer,
    mVertexOffset: u32,
    mVertexCount: u32,
    mVertexStride: u32,
    mVertexFormat: TinyImageFormat,
    mIndexOffset: u32,
    mIndexCount: u32,
    mIndexType: IndexType,
    mFlags: AccelerationStructureGeometryFlags,
};

///*********************************************************************
///
///	  Bottom Level Structures define the geometry data such as vertex buffers, index buffers
///	  Top Level Structures define the instance data for the geometry such as instance matrix, instance ID, ...
/// #mDescCount - Number of geometries or instances in this structure
///*********************************************************************
pub const AccelerationStructureDescBottom = extern struct {
/// Number of geometries / instances in thie acceleration structure
    mDescCount: u32,
/// Array of geometries in the bottom level acceleration structure
    pGeometryDescs: [*c]AccelerationStructureGeometryDesc,
};

///*********************************************************************
///
///	  Bottom Level Structures define the geometry data such as vertex buffers, index buffers
///	  Top Level Structures define the instance data for the geometry such as instance matrix, instance ID, ...
/// #mDescCount - Number of geometries or instances in this structure
///*********************************************************************
pub const AccelerationStructureDescTop = extern struct {
    mDescCount: u32,
    pInstanceDescs: [*c]AccelerationStructureInstanceDesc,
};

pub const AccelerationStructureDesc = extern struct {
    mType: AccelerationStructureType,
    mFlags: AccelerationStructureBuildFlags,
    __union_field1: __Union0,

pub const __Union0 = extern union {
    mBottom: AccelerationStructureDescBottom,
    mTop: AccelerationStructureDescTop,
};

};

pub const RaytracingBuildASDesc = extern struct {
    pAccelerationStructure: [*c]AccelerationStructure,
    mIssueRWBarrier: bool,
};

pub extern fn @"initRaytracing"(pRenderer: [*c]Renderer, ppRaytracing: [*c][*c]Raytracing) bool;
pub extern fn @"exitRaytracing"(pRenderer: [*c]Renderer, pRaytracing: [*c]Raytracing) void;
/// pScratchBufferSize - Holds the size of scratch buffer to be passed to cmdBuildAccelerationStructure
pub extern fn @"addAccelerationStructure"(pRaytracing: [*c]Raytracing, pDesc: [*c]const AccelerationStructureDesc, ppAccelerationStructure: [*c][*c]AccelerationStructure) void;
pub extern fn @"removeAccelerationStructure"(pRaytracing: [*c]Raytracing, pAccelerationStructure: [*c]AccelerationStructure) void;
/// Free the scratch memory allocated by acceleration structure after it has been built completely
/// Does not free acceleration structure
pub extern fn @"removeAccelerationStructureScratch"(pRaytracing: [*c]Raytracing, pAccelerationStructure: [*c]AccelerationStructure) void;
pub extern fn @"cmdBuildAccelerationStructure"(pCmd: [*c]Cmd, pRaytracing: [*c]Raytracing, pDesc: [*c]RaytracingBuildASDesc) void;


// opaques

const SSVGFDenoiser = anyopaque;
const RootSignature = anyopaque;
const ShaderResource = anyopaque;
