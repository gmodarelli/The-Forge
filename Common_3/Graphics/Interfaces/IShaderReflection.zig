// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

pub const TextureDimension = extern struct {
    bits: c_int = 0,

    pub const TEXTURE_DIM_1D: TextureDimension = .{ .bits = 0 };
    pub const TEXTURE_DIM_2D: TextureDimension = .{ .bits = 1 };
    pub const TEXTURE_DIM_2DMS: TextureDimension = .{ .bits = 2 };
    pub const TEXTURE_DIM_3D: TextureDimension = .{ .bits = 3 };
    pub const TEXTURE_DIM_CUBE: TextureDimension = .{ .bits = 4 };
    pub const TEXTURE_DIM_1D_ARRAY: TextureDimension = .{ .bits = 5 };
    pub const TEXTURE_DIM_2D_ARRAY: TextureDimension = .{ .bits = 6 };
    pub const TEXTURE_DIM_2DMS_ARRAY: TextureDimension = .{ .bits = 7 };
    pub const TEXTURE_DIM_CUBE_ARRAY: TextureDimension = .{ .bits = 8 };
    pub const TEXTURE_DIM_COUNT: TextureDimension = .{ .bits = 9 };
    pub const TEXTURE_DIM_UNDEFINED: TextureDimension = .{ .bits = 10 };

    // pub usingnamespace cpp.FlagsMixin(TextureDimension);
};

pub const VertexInput = extern struct {
    /// resource name
    name: [*c]const u8,
    /// The size of the attribute
    size: u32,
    /// name size
    name_size: u32,
};

pub const ShaderReflection = extern struct {
    /// single large allocation for names to reduce number of allocations
    pNamePool: [*c]u8,
    pVertexInputs: [*c]VertexInput,
    mNamePoolSize: u32,
    mVertexInputsCount: u32,
    /// Thread group size for compute shader
    mNumThreadsPerGroup: [3]u32,
    mOutputRenderTargetTypesMask: u32,
    /// number of tessellation control point
    mNumControlPoint: u32,
    mResourceHeapIndexing: bool,
    mSamplerHeapIndexing: bool,
};

pub const PipelineReflection = extern struct {
    pNamePool: [*c]u8,
    /// the individual stages reflection data.
    mStageReflectionCount: u32,
    mNamePoolSize: u32,
    mVertexStageIndex: u32,
    mHullStageIndex: u32,
    mDomainStageIndex: u32,
    mGeometryStageIndex: u32,
    mPixelStageIndex: u32,
    mVertexInputsCount: u32,
    /// Thread group size for compute shader
    mNumThreadsPerGroup: [3]u32,
    /// Pixel shader
    mOutputRenderTargetTypesMask: u32,
    /// number of tessellation control point
    mNumControlPoint: u32,
    mResourceHeapIndexing: bool,
    mSamplerHeapIndexing: bool,
};

pub extern fn removeShaderReflection(pReflection: [*c]ShaderReflection) void;
pub extern fn addPipelineReflection(pReflection: [*c]ShaderReflection, stageCount: u32, pOutReflection: [*c]PipelineReflection) void;
pub extern fn removePipelineReflection(pReflection: [*c]PipelineReflection) void;
// syntax errors:
// pub inline fn isDescriptorRootConstant(resourceName: [*c]const u8) bool {
// var lower: u8 = ;
// var length: u32 = @as(u32, @intCast(strlen(resourceName)));
// { var i: u32 = @as(u32, @intCast(0)); while (i < length) : (i += 1){
// [i] = @as(u8, @intCast(tolower(@as(c_int, @intCast(resourceName[i])))));
// }} return strstr(, "\"rootconstant\"") or strstr(, "\"pushconstant\"");
// }
//
// syntax errors:
// pub inline fn isDescriptorRootCbv(resourceName: [*c]const u8) bool {
// var lower: u8 = ;
// var length: u32 = @as(u32, @intCast(strlen(resourceName)));
// { var i: u32 = @as(u32, @intCast(0)); while (i < length) : (i += 1){
// [i] = @as(u8, @intCast(tolower(@as(c_int, @intCast(resourceName[i])))));
// }} return strstr(, "\"rootcbv\"");
// }
//
