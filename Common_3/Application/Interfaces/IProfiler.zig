// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

// TIDES: BEGIN MANUAL CHANGES
const float2 = [2]f32;
const ThreadID = anyopaque;
// TIDES: END MANUAL CHANGES

pub const ProfileToken = u64;

pub const ProfilerDesc = extern struct {
    pRenderer: *Renderer = undefined,
    ppQueues: [*c]*Queue = null,
    ppProfilerNames: [*c]const [*c]u8 = null,
    pProfileTokens: *ProfileToken = undefined,
    mGpuProfilerCount: u32 = @as(u32, @intCast(0)),
};

extern fn _1_initProfiler_(pDesc: [*c]ProfilerDesc) void;
/// Must be called before adding any profiling
pub const initProfiler = _1_initProfiler_;

extern fn _1_exitProfiler_() void;
/// Call on application exit
pub const exitProfiler = _1_exitProfiler_;

extern fn _1_loadProfilerUI_(widthUI: u32, heightUI: u32) void;
/// setups Profiler's UI. Call on Load stage.
pub const loadProfilerUI = _1_loadProfilerUI_;

extern fn _1_unloadProfilerUI_() void;
/// Call on Unload stage.
pub const unloadProfilerUI = _1_unloadProfilerUI_;

extern fn _1_flipProfiler_() void;
/// Call once per frame to update profiler
pub const flipProfiler = _1_flipProfiler_;

extern fn _1_setAggregateFrames_(nFrames: u32) void;
/// Set amount of frames before aggregation
pub const setAggregateFrames = _1_setAggregateFrames_;

// TIDES: BEGIN MANUAL CHANGES
// extern fn @"_1_dumpProfileData_"(appName: [*c]const u8, nMaxFrames: u32) void;
// /// Dump profile data to "profile-(date).html" of recorded frames, until a maximum amount of frames
// pub fn dumpProfileData(__opt: struct { appName: [*c]const u8 = &"\"\"", nMaxFrames: u32 = @as(u32, @intCast(64)),  },) void {
//     return @"_1_dumpProfileData_"(__opt.appName, __opt.nMaxFrames);
// }
//
// extern fn @"_1_dumpBenchmarkData_"(pSettings: [*c]IApp::Settings, outFilename: [*c]const u8, appName: [*c]const u8) void;
// /// Dump benchmark data to "benchmark-(data).txt" of recorded frames
// pub fn dumpBenchmarkData(pSettings: [*c]IApp::Settings, __opt: struct { outFilename: [*c]const u8 = &"\"\"", appName: [*c]const u8 = &"\"\"",  },) void {
//     return @"_1_dumpBenchmarkData_"(pSettings, __opt.outFilename, __opt.appName);
// }
// TIDES: END MANUAL CHANGES

extern fn _1_cmdDrawGpuProfile_(pCmd: [*c]Cmd, screenCoordsInPx: float2, nProfileToken: ProfileToken, pDrawDesc: [*c]FontDrawDesc) float2;
/// Call once per frame before AppUI.Draw, draw requested Gpu profiler timers
/// Returns text dimensions so caller can align other UI elements
pub const cmdDrawGpuProfile = _1_cmdDrawGpuProfile_;

extern fn _1_cmdDrawCpuProfile_(pCmd: [*c]Cmd, screenCoordsInPx: float2, pDrawDesc: [*c]FontDrawDesc) float2;
/// Call once per frame before AppUI.Draw, draw requested Cpu profile time
/// Returns text dimensions so caller can align other UI elements
pub const cmdDrawCpuProfile = _1_cmdDrawCpuProfile_;

extern fn _1_toggleProfilerUI_(active: bool) void;
/// Toggle profiler display on/off.
pub const toggleProfilerUI = _1_toggleProfilerUI_;

extern fn _1_toggleProfilerMenuUI_(active: bool) void;
/// Toggle profiler menu display on/off.
pub const toggleProfilerMenuUI = _1_toggleProfilerMenuUI_;

extern fn _1_toggleProfilerDrawing_(active: bool) void;
/// Toggle profiler display on/off. Includes system information. Used when taking screenshots.
pub const toggleProfilerDrawing = _1_toggleProfilerDrawing_;

extern fn _1_initGpuProfiler_(pRenderer: *Renderer, pQueue: *Queue, pProfilerName: [*c]const u8) ProfileToken;
/// Call only after initProfiler(), for manually adding Gpu Profilers
pub const initGpuProfiler = _1_initGpuProfiler_;

extern fn _1_exitGpuProfiler_(nProfileToken: ProfileToken) void;
/// Call only before exitProfiler(), for manually removing Gpu Profilers
pub const exitGpuProfiler = _1_exitGpuProfiler_;

extern fn _1_cmdBeginGpuFrameProfile_(pCmd: *Cmd, nProfileToken: ProfileToken, bUseMarker: bool) void;
/// Must be called before any call to cmdBeginGpuTimestampQuery
/// Preferred time to call this function is right after calling beginCmd
pub fn cmdBeginGpuFrameProfile(
    pCmd: *Cmd,
    nProfileToken: ProfileToken,
    __opt: struct {
        bUseMarker: bool = true,
    },
) void {
    return _1_cmdBeginGpuFrameProfile_(pCmd, nProfileToken, __opt.bUseMarker);
}

extern fn _1_cmdEndGpuFrameProfile_(pCmd: *Cmd, nProfileToken: ProfileToken) void;
/// Must be called after all gpu profiles are finished.
/// This function cannot be called inside a render pass (cmdBeginRender-cmdEndRender)
/// Preferred time to call this function is right before calling endCmd
pub const cmdEndGpuFrameProfile = _1_cmdEndGpuFrameProfile_;

extern fn _1_cmdBeginGpuTimestampQuery_(pCmd: *Cmd, nProfileToken: ProfileToken, pName: [*c]const u8, bUseMarker: bool) ProfileToken;
pub fn cmdBeginGpuTimestampQuery(
    pCmd: *Cmd,
    nProfileToken: ProfileToken,
    pName: [*c]const u8,
    __opt: struct {
        bUseMarker: bool = true,
    },
) ProfileToken {
    return _1_cmdBeginGpuTimestampQuery_(pCmd, nProfileToken, pName, __opt.bUseMarker);
}

extern fn _1_cmdEndGpuTimestampQuery_(pCmd: *Cmd, nProfileToken: ProfileToken) void;
pub const cmdEndGpuTimestampQuery = _1_cmdEndGpuTimestampQuery_;

extern fn _1_getGpuProfileTime_(nProfileToken: ProfileToken) f32;
/// Gpu times in milliseconds
pub const getGpuProfileTime = _1_getGpuProfileTime_;

extern fn _1_getGpuProfileAvgTime_(nProfileToken: ProfileToken) f32;
pub const getGpuProfileAvgTime = _1_getGpuProfileAvgTime_;

extern fn _1_getGpuProfileMinTime_(nProfileToken: ProfileToken) f32;
pub const getGpuProfileMinTime = _1_getGpuProfileMinTime_;

extern fn _1_getGpuProfileMaxTime_(nProfileToken: ProfileToken) f32;
pub const getGpuProfileMaxTime = _1_getGpuProfileMaxTime_;

extern fn _1_getGpuProfileTicksPerSecond_(nProfileToken: ProfileToken) u64;
pub const getGpuProfileTicksPerSecond = _1_getGpuProfileTicksPerSecond_;

extern fn _1_cpuProfileEnter_(nToken: ProfileToken) u64;
///------ Cpu profiler ------------//
pub const cpuProfileEnter = _1_cpuProfileEnter_;

extern fn _1_cpuProfileLeave_(nToken: ProfileToken, nTick: u64) void;
pub const cpuProfileLeave = _1_cpuProfileLeave_;

extern fn _1_getCpuProfileToken_(pGroup: [*c]const u8, pName: [*c]const u8, nColor: u32) ProfileToken;
pub const getCpuProfileToken = _1_getCpuProfileToken_;

pub const CpuProfileScopeMarker = extern struct {
    nToken: ProfileToken,
    nTick: u64,

    extern fn _1_CpuProfileScopeMarker_init_(self: *CpuProfileScopeMarker, pGroup: [*c]const u8, pName: [*c]const u8, nColor: u32) void;
    pub inline fn init(pGroup: [*c]const u8, pName: [*c]const u8, nColor: u32) CpuProfileScopeMarker {
        var self: CpuProfileScopeMarker = undefined;
        _1_CpuProfileScopeMarker_init_(&self, pGroup, pName, nColor);
        return self;
    }

    extern fn _1_CpuProfileScopeMarker_deinit_(self: *CpuProfileScopeMarker) void;
    pub const deinit = _1_CpuProfileScopeMarker_deinit_;
};

extern fn _1_getCpuProfileTime_(pGroup: [*c]const u8, pName: [*c]const u8, pThreadID: *ThreadID) f32;
/// Cpu times in milliseconds
pub fn getCpuProfileTime(
    pGroup: [*c]const u8,
    pName: [*c]const u8,
    __opt: struct {
        pThreadID: *ThreadID = undefined,
    },
) f32 {
    return _1_getCpuProfileTime_(pGroup, pName, __opt.pThreadID);
}

extern fn _1_getCpuProfileAvgTime_(pGroup: [*c]const u8, pName: [*c]const u8, pThreadID: *ThreadID) f32;
pub fn getCpuProfileAvgTime(
    pGroup: [*c]const u8,
    pName: [*c]const u8,
    __opt: struct {
        pThreadID: *ThreadID = undefined,
    },
) f32 {
    return _1_getCpuProfileAvgTime_(pGroup, pName, __opt.pThreadID);
}

extern fn _1_getCpuProfileMinTime_(pGroup: [*c]const u8, pName: [*c]const u8, pThreadID: *ThreadID) f32;
pub fn getCpuProfileMinTime(
    pGroup: [*c]const u8,
    pName: [*c]const u8,
    __opt: struct {
        pThreadID: *ThreadID = undefined,
    },
) f32 {
    return _1_getCpuProfileMinTime_(pGroup, pName, __opt.pThreadID);
}

extern fn _1_getCpuProfileMaxTime_(pGroup: [*c]const u8, pName: [*c]const u8, pThreadID: *ThreadID) f32;
pub fn getCpuProfileMaxTime(
    pGroup: [*c]const u8,
    pName: [*c]const u8,
    __opt: struct {
        pThreadID: *ThreadID = undefined,
    },
) f32 {
    return _1_getCpuProfileMaxTime_(pGroup, pName, __opt.pThreadID);
}

extern fn _1_getCpuFrameTime_() f32;
pub const getCpuFrameTime = _1_getCpuFrameTime_;

extern fn _1_getCpuAvgFrameTime_() f32;
pub const getCpuAvgFrameTime = _1_getCpuAvgFrameTime_;

extern fn _1_getCpuMinFrameTime_() f32;
pub const getCpuMinFrameTime = _1_getCpuMinFrameTime_;

extern fn _1_getCpuMaxFrameTime_() f32;
pub const getCpuMaxFrameTime = _1_getCpuMaxFrameTime_;

// opaques

const Cmd = anyopaque;
const Renderer = anyopaque;
const Queue = anyopaque;
const FontDrawDesc = anyopaque;
const UserInterface = anyopaque;
