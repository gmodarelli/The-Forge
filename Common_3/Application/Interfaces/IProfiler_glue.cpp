// auto generated by c2z
#include <new>
#include "IProfiler.h"

extern "C" void _1_initProfiler_(ProfilerDesc* pDesc) { ::initProfiler(pDesc); }
extern "C" void _1_exitProfiler_() { ::exitProfiler(); }
extern "C" void _1_loadProfilerUI_(uint32_t widthUI, uint32_t heightUI) { ::loadProfilerUI(widthUI, heightUI); }
extern "C" void _1_unloadProfilerUI_() { ::unloadProfilerUI(); }
extern "C" void _1_flipProfiler_() { ::flipProfiler(); }
extern "C" void _1_setAggregateFrames_(uint32_t nFrames) { ::setAggregateFrames(nFrames); }
extern "C" void _1_dumpProfileData_(const char* appName, uint32_t nMaxFrames) { ::dumpProfileData(appName, nMaxFrames); }
extern "C" void _1_dumpBenchmarkData_(IApp::Settings* pSettings, const char* outFilename, const char* appName)
{
    ::dumpBenchmarkData(pSettings, outFilename, appName);
}
extern "C" float2 _1_cmdDrawGpuProfile_(Cmd* pCmd, float2 screenCoordsInPx, ProfileToken nProfileToken, FontDrawDesc* pDrawDesc)
{
    return ::cmdDrawGpuProfile(pCmd, screenCoordsInPx, nProfileToken, pDrawDesc);
}
extern "C" float2 _1_cmdDrawCpuProfile_(Cmd* pCmd, float2 screenCoordsInPx, FontDrawDesc* pDrawDesc)
{
    return ::cmdDrawCpuProfile(pCmd, screenCoordsInPx, pDrawDesc);
}
extern "C" void         _1_toggleProfilerUI_(bool active) { ::toggleProfilerUI(active); }
extern "C" void         _1_toggleProfilerMenuUI_(bool active) { ::toggleProfilerMenuUI(active); }
extern "C" void         _1_toggleProfilerDrawing_(bool active) { ::toggleProfilerDrawing(active); }
extern "C" ProfileToken _1_initGpuProfiler_(Renderer* pRenderer, Queue* pQueue, const char* pProfilerName)
{
    return ::initGpuProfiler(pRenderer, pQueue, pProfilerName);
}
extern "C" void _1_exitGpuProfiler_(ProfileToken nProfileToken) { ::exitGpuProfiler(nProfileToken); }
extern "C" void _1_cmdBeginGpuFrameProfile_(Cmd* pCmd, ProfileToken nProfileToken, bool bUseMarker)
{
    ::cmdBeginGpuFrameProfile(pCmd, nProfileToken, bUseMarker);
}
extern "C" void         _1_cmdEndGpuFrameProfile_(Cmd* pCmd, ProfileToken nProfileToken) { ::cmdEndGpuFrameProfile(pCmd, nProfileToken); }
extern "C" ProfileToken _1_cmdBeginGpuTimestampQuery_(Cmd* pCmd, ProfileToken nProfileToken, const char* pName, bool bUseMarker)
{
    return ::cmdBeginGpuTimestampQuery(pCmd, nProfileToken, pName, bUseMarker);
}
extern "C" void     _1_cmdEndGpuTimestampQuery_(Cmd* pCmd, ProfileToken nProfileToken) { ::cmdEndGpuTimestampQuery(pCmd, nProfileToken); }
extern "C" float    _1_getGpuProfileTime_(ProfileToken nProfileToken) { return ::getGpuProfileTime(nProfileToken); }
extern "C" float    _1_getGpuProfileAvgTime_(ProfileToken nProfileToken) { return ::getGpuProfileAvgTime(nProfileToken); }
extern "C" float    _1_getGpuProfileMinTime_(ProfileToken nProfileToken) { return ::getGpuProfileMinTime(nProfileToken); }
extern "C" float    _1_getGpuProfileMaxTime_(ProfileToken nProfileToken) { return ::getGpuProfileMaxTime(nProfileToken); }
extern "C" uint64_t _1_getGpuProfileTicksPerSecond_(ProfileToken nProfileToken) { return ::getGpuProfileTicksPerSecond(nProfileToken); }
extern "C" uint64_t _1_cpuProfileEnter_(ProfileToken nToken) { return ::cpuProfileEnter(nToken); }
extern "C" void     _1_cpuProfileLeave_(ProfileToken nToken, uint64_t nTick) { ::cpuProfileLeave(nToken, nTick); }
extern "C" ProfileToken _1_getCpuProfileToken_(const char* pGroup, const char* pName, uint32_t nColor)
{
    return ::getCpuProfileToken(pGroup, pName, nColor);
}
extern "C" void _1_CpuProfileScopeMarker_init_(::CpuProfileScopeMarker* self, const char* pGroup, const char* pName, uint32_t nColor)
{
    new (self)::CpuProfileScopeMarker(pGroup, pName, nColor);
}
extern "C" void  _1_CpuProfileScopeMarker_deinit_(::CpuProfileScopeMarker* self) { self->~CpuProfileScopeMarker(); }
extern "C" float _1_getCpuProfileTime_(const char* pGroup, const char* pName, ThreadID* pThreadID)
{
    return ::getCpuProfileTime(pGroup, pName, pThreadID);
}
extern "C" float _1_getCpuProfileAvgTime_(const char* pGroup, const char* pName, ThreadID* pThreadID)
{
    return ::getCpuProfileAvgTime(pGroup, pName, pThreadID);
}
extern "C" float _1_getCpuProfileMinTime_(const char* pGroup, const char* pName, ThreadID* pThreadID)
{
    return ::getCpuProfileMinTime(pGroup, pName, pThreadID);
}
extern "C" float _1_getCpuProfileMaxTime_(const char* pGroup, const char* pName, ThreadID* pThreadID)
{
    return ::getCpuProfileMaxTime(pGroup, pName, pThreadID);
}
extern "C" float _1_getCpuFrameTime_() { return ::getCpuFrameTime(); }
extern "C" float _1_getCpuAvgFrameTime_() { return ::getCpuAvgFrameTime(); }
extern "C" float _1_getCpuMinFrameTime_() { return ::getCpuMinFrameTime(); }
extern "C" float _1_getCpuMaxFrameTime_() { return ::getCpuMaxFrameTime(); }
