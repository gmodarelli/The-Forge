// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

// TIDES: BEGIN MANUAL CHANGES
const FileMode = @import("../Interfaces/IFileSystem.zig").FileMode;
// TIDES: END MANUAL CHANGES

/// If you add more levels don't forget to change LOG_LEVELS macro to the actual number of levels
pub const LogLevel = extern struct {
    bits: c_int = 0,

    pub const eNONE: LogLevel = .{ .bits = 0 };
    pub const eRAW: LogLevel = .{ .bits = 1 };
    pub const eDEBUG: LogLevel = .{ .bits = 2 };
    pub const eINFO: LogLevel = .{ .bits = 4 };
    pub const eWARNING: LogLevel = .{ .bits = 8 };
    pub const eERROR: LogLevel = .{ .bits = 16 };
    pub const eALL: LogLevel = .{ .bits = -1 };

    // pub usingnamespace cpp.FlagsMixin(LogLevel);
};

/// If you add more levels don't forget to change LOG_LEVELS macro to the actual number of levels
pub const LogCallbackFn = ?*const fn(?*anyopaque,[*c]const u8) callconv(.C) void ;

pub const LogCloseFn = ?*const fn(?*anyopaque) callconv(.C) void ;

pub const LogFlushFn = ?*const fn(?*anyopaque) callconv(.C) void ;

/// Initialization/Exit functions are thread unsafe
/// appName   used to create appName.log. Pass NULL to disable
/// level     mask of LogLevel bits. Log is ignored if its level is missing in mask. Use eALL to enable full log
pub extern fn @"initLog"(appName: [*c]const u8, level: LogLevel) void;
pub extern fn @"exitLog"() void;
pub extern fn @"addLogFile"(filename: [*c]const u8, file_mode: FileMode, log_level: LogLevel) void;
pub extern fn @"addLogCallback"(id: [*c]const u8, log_level: u32, user_data: ?*anyopaque, callback: LogCallbackFn, close: LogCloseFn, flush: LogFlushFn) void;
pub extern fn @"writeLogVaList"(level: u32, filename: [*c]const u8, line_number: c_int, message: [*c]const u8, args: [*c]u8) void;
///+V576, function:writeLog, format_arg:4, ellipsis_arg:5
pub extern fn @"writeLog"(level: u32, filename: [*c]const u8, line_number: c_int, message: [*c]const u8, ...) callconv(.C) void;
///+V576, function:writeRawLog, format_arg:3, ellipsis_arg:4
pub extern fn @"writeRawLog"(level: u32, @"error": bool, message: [*c]const u8, ...) callconv(.C) void;
///+V576, function:_FailedAssert, format_arg:4, ellipsis_arg:5
pub extern fn @"_FailedAssert"(file: [*c]const u8, line: c_int, statement: [*c]const u8, msg: [*c]const u8, ...) callconv(.C) void;
/// Usage:
/// puts(humanReadableTime(ns).str);
/// printf("%s\n", humanReadableTime(ms * 1000).str);
/// humanReadableSize(9238412498).str;
pub const HumanReadableValue = extern struct {
    str: [16]u8,
};

pub extern fn @"humanReadableSSize"(size: isize) HumanReadableValue;
pub extern fn @"humanReadableTimeD"(nanoseconds: f64) HumanReadableValue;
pub inline fn humanReadableSize(size: usize) HumanReadableValue {
    return humanReadableSSize(@as(isize, @intCast(size)));
}
pub inline fn humanReadableTime(nanoseconds: i64) HumanReadableValue {
    return humanReadableTimeD(@floatFromInt(nanoseconds));
}
